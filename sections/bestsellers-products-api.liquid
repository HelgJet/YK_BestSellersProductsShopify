{{ 'component-rating.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

 {{ 'section-bestsellers-products.css' | asset_url | stylesheet_tag }}

{%- style -%}
  #bs-products-container-{{ section.id }} {
    --page-width: {{ section.settings.page_width | divided_by: 10 }}rem;
  }

  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
      {% if section.settings.use_section_width == blank %}
          .swiper-hidden {
            padding: 0;
            margin-left: max(5rem, calc((100vw - var(--page-width) + 10rem - 2.4rem) / 2));
          }
      {% endif %}
  }
   


{%- endstyle -%}

{%- liquid
 assign current_product = product
 assign collection = current_product.collections.first
-%}


{% comment %}
{%- liquid
  assign current_product = product
  assign highest_products_count = 0
  assign collection_with_most_products = null

  if collection == null or collection.handle == 'frontpage' or collection.handle == 'all'
    for c in product.collections
      if c.handle != 'frontpage' and c.handle != 'all' and c.all_products_count > 1
        if c.products_count > highest_products_count
          assign highest_products_count = c.products_count
          assign collection_with_most_products = c
        endif
      endif
    endfor
    if collection_with_most_products != null
      assign collection = collection_with_most_products
    endif
  endif
-%}
{% endcomment %}


{% if collection and collection.products_count > 1 %}
  {%- liquid
    assign limit_js = section.settings.max_limit | plus: 0
    assign current_collection_handle = collection.handle
    assign current_products_list = collections[current_collection_handle].products
    assign tags_contains = false
    if section.settings.tags_filter != blank
      assign tags_contains = true
      assign tags_filter_js = section.settings.tags_filter | split: ', '
    endif

    assign columns_mobile_int = section.settings.columns_mobile | plus: 0
    assign columns_desktop_int = section.settings.columns_desktop | plus: 0
  -%}

  <div id="bs-products-container-{{ section.id }}"> 
 <div class="section-{{ section.id }}-padding isolate{% if section.settings.use_section_width %} page-width{% endif %}">
 <div class="swiper-hidden">
  <bestsellers-products
    data-section="{{ section.id }}"
    data-slider-per-mobile="{{ columns_mobile_int }}"
    data-slider-per-desktop="{{ columns_desktop_int }}"
  >

    {%- unless section.settings.title == blank -%}
      <h2>
        {{ section.settings.title | escape }}
      </h2>
    {%- endunless -%} 

    <swiper-container id="BestsellerSliderProducts"
       init="false"  
       navigation-next-el="#my-next-button-{{ section.id }}"
       navigation-prev-el="#my-prev-button-{{ section.id }}"
       navigation="true" >

    </swiper-container>
     <button id="my-next-button-{{ section.id }}" class="swiper-button-next">
        <svg width="11" height="20" viewBox="0 0 11 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="__web-inspector-hide-shortcut__"><path d="M0.38296 20.0762C0.111788 19.805 0.111788 19.3654 0.38296 19.0942L9.19758 10.2796L0.38296 1.46497C0.111788 1.19379 0.111788 0.754138 0.38296 0.482966C0.654131 0.211794 1.09379 0.211794 1.36496 0.482966L10.4341 9.55214C10.8359 9.9539 10.8359 10.6053 10.4341 11.007L1.36496 20.0762C1.09379 20.3474 0.654131 20.3474 0.38296 20.0762Z" fill="currentColor"></path></svg>
     </button>
     <button id="my-prev-button-{{ section.id }}" class="swiper-button-prev"><svg width="11" height="20" viewBox="0 0 11 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="__web-inspector-hide-shortcut__"><path d="M0.38296 20.0762C0.111788 19.805 0.111788 19.3654 0.38296 19.0942L9.19758 10.2796L0.38296 1.46497C0.111788 1.19379 0.111788 0.754138 0.38296 0.482966C0.654131 0.211794 1.09379 0.211794 1.36496 0.482966L10.4341 9.55214C10.8359 9.9539 10.8359 10.6053 10.4341 11.007L1.36496 20.0762C1.09379 20.3474 0.654131 20.3474 0.38296 20.0762Z" fill="currentColor"></path></svg></button>
 
  </bestsellers-products>
   </div>
     </div>
      </div>


  <script>

    
//fetching best selling products from the same category
async function fetchBestSellingProducts(category, maxLimit, tagsProduct, currentProductHandle) {
    const storefrontAccessToken = '374602b3d4bb8103e75becaae1d47c10';
    const domain = 'devpeview.myshopify.com';
    const query = `
    query FetchBestSellingProducts($category: String!) {
      collectionByHandle(handle: $category) { 
        title
        products(first: 30, sortKey: BEST_SELLING) {
          edges {
            node {
              id
              handle
              tags
            }
          }
        }
      }
    }`;

    try {
        const response = await fetch(`https://${domain}/api/2021-10/graphql.json`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Shopify-Storefront-Access-Token': storefrontAccessToken,
            },
            body: JSON.stringify({
                query,
                variables: { category: category },
            }),
        });
        
        if (!response.ok) throw new Error('Network response was not ok.');

        const { data } = await response.json();
      
        let products = data.collectionByHandle.products.edges.map(edge => edge.node);

        // // Apply tag filter only if tagsProduct is not empty
        if (tagsProduct?.trim().length > 0) {
            const tagsArray = tagsProduct.toLowerCase().split(',').map(tag => tag.trim());
            products = products.filter(product => 
                product.tags.some(tag => tagsArray.includes(tag.toLowerCase()))
            );
        } 
      
        // Filter out the current product   
        products = products.filter(product => product.handle !== currentProductHandle);
        const limitedProducts = products.slice(0, maxLimit);

       // Set localStorage with product handles
        const productHandles = limitedProducts.map(product => product.handle);
        localStorage.setItem('productHandles', JSON.stringify(productHandles));
      
    } catch (error) {
        console.error('Error fetching products:', error);
    }
}

document.addEventListener('DOMContentLoaded', async () => {
    const category = '{{ current_collection_handle }}';
    const maxLimit = parseInt('{{ limit_js }}', 10); 
    const currentProductHandle = '{{ current_product.handle }}';
    let productTags = '{{ tags_filter_js }}';
    productTags = productTags ?? "";
    await fetchBestSellingProducts(category, maxLimit, productTags, currentProductHandle);
});


// Custom web component for set template card product and init slider     
class BestsellersProducts extends HTMLElement {
   constructor() {
    super();
 
    this.slider = this.querySelector('#BestsellerSliderProducts');
    this.selectors = {
      itemProduct: '[product-template-js]', 
      sectionId: this.dataset.section,
      perDesktop: parseFloat(this.dataset.sliderPerDesktop),
      perMobile: parseFloat(this.dataset.sliderPerMobile),
    };   
  }

connectedCallback() { 
    const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);
        this.loadBestsellersProducts();  
    }
    new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 50px 0px'}).observe(this);
}

 loadBestsellersProducts() {
    const productHandles = this.getBestsellersProductHandles();
    if (productHandles.length > 0) {
      this.setTemplate(productHandles);
    }
  }

  getBestsellersProductHandles() {
    return JSON.parse(localStorage.getItem('productHandles')) || [];
  }

  async fetchProductHTML(handle) {
    const productUrl = `/products/${handle}?view=litecard`;
    try {
      const res = await fetch(productUrl);
      if (!res.ok) throw new Error(`Failed to fetch product for handle: ${handle}`);
      const text = await res.text();
      const parser = new DOMParser();
      const htmlDocument = parser.parseFromString(text, 'text/html');
      const itemProduct = htmlDocument.documentElement.querySelector(this.selectors.itemProduct);
      if (itemProduct) {
        return itemProduct.outerHTML;
      } else {
        console.error(`No element found for handle: ${handle}`);
        return '';
      }
    } catch (err) {
      console.error(`Failed to load content for handle: ${handle}`, err);
      return '';
    }
  }

  async setTemplate(handles) {
    const requests = handles.map(handle => this.fetchProductHTML(handle));
    try {
      const responses = await Promise.all(requests);
      const itemProducts = responses.map((item, index) => `<swiper-slide lazy="true" id="Slide-${this.selectors.sectionId}-${index + 1}" class="swiper-slide">${item}</swiper-slide>`).join('');
      this.slider.innerHTML = '';
      this.classList.add('bestsellers--loaded');
      this.slider.innerHTML = itemProducts;
      this.initSlider(handles);
    } catch (error) {
      console.error('Error setting template:', error);
    }
  }

  initSlider(elements) {

    const swiperEl = document.querySelector('#BestsellerSliderProducts');

  // swiper parameters
  const swiperParams = {
       slidesPerView: this.selectors.perMobile,
       spaceBetween: 16,
         
         breakpoints: {
           640: {
             slidesPerView: 2.5,
             spaceBetween: 16,
           },
           768: {
            slidesPerView: 3.5,
             spaceBetween: 24,
           },
           1024: {
             slidesPerView: this.selectors.perDesktop,
             spaceBetween: 24, 
           },
         },
  };

  Object.assign(swiperEl, swiperParams);
  swiperEl.initialize();

 }
}

customElements.define('bestsellers-products', BestsellersProducts);

</script>



<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js" defer></script>
  
{% endif %}

{% schema %}
{
  "name": "Bestseller Products API",
  "tag": "section",
  "limit": 1,
  "class": "section bestseller-products",
  "enabled_on": {
    "templates": ["product"]
  },
  "settings": [
    {
      "type": "range",
      "id": "page_width",
      "min": 1000,
      "max": 1920,
      "step": 10,
      "default": 1200,
      "unit": "px",
      "label": "t:settings_schema.layout.settings.page_width.label"
    },

    {
      "type": "checkbox",
      "id": "use_section_width",
      "label": "Use section width",
      "default": true
    },

    {
      "type": "text",
      "id": "title",
      "default": "Your KAYA Bestseller Products",
      "label": "Title"
    },

     {
      "type": "range",
      "id": "max_limit",
      "min": 10,
      "max": 30,
      "step": 5,
      "default": 10,
      "label": "Max Limit Products"
    },

     {
      "type": "text",
      "id": "tags_filter",
      "label": "Filter by tags (separate by ',')"
     },

     {
      "type": "range",
      "id": "columns_desktop",
      "min": 3,
      "max": 6,
      "step": 0.5,
      "default": 5,
      "label": "Columns desktop"
    },


    {
      "type": "header",
      "content": "Header mobile content"
    },

     {
      "type": "range",
      "id": "columns_mobile",
      "min": 1,
      "max": 3,
      "step": 0.5,
      "default": 1.5,
      "label": "Columns mobile"
    },
    {
      "type": "header",
      "content": "Section padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Bestseller Products API"
	  }
  ]
}
{% endschema %}
